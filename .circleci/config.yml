version: 2.1
orbs:

commands:
  destroy-environment:
    description: Stop and Destroy backend and frontend cloudformation stacks with a given workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Stop and Destroy environments
          when: on_fail
          command: |
            # Empty frontend bucket
            aws s3 rm s3://udapeople-${Workflow_ID} --recursive

            # Delete frontend stack
            aws cloudformation delete-stack --stack-name udapeople-frontend-${Workflow_ID}

            # Delete backend stack
            aws cloudformation delete-stack --stack-name udapeople-backend-${Workflow_ID}
	
  install_awscli:
	  description: Install AWS CLI v2
	  steps:
	    - run:
	        name: Install AWS CLI v2
	        command: |
	          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
	          unzip awscliv2.zip
	          sudo ./aws/install

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Build frontend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
          
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
         keys: [frontend-deps]
      - run:
         name: Test frontend
         command: |
           cd frontend
           npm install
           npm run test
                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Analyze frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  
  deploy-infrastructure:
    docker:
      - image: cimg/python:3.10
    steps:
      -	checkout
      -	install_awscli
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
		        --template-file .circleci/files/frontend.yml \
		        --tags project=udapeople \
		        --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:5}" \
		        --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:5}"
	    - run:
		      name: Add backend ip to ansible inventory
          command: |
               BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --output text)
          echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
          cat .circleci/ansible/inventory.txt

	    - persist_to_workspace:
          root: ~/
          paths:
            - cdond-c3-projectstarter/.circleci/ansible/inventory.txt        

workflows:
  udapeople:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [test-frontend]
      - scan-backend:
          requires: [test-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
